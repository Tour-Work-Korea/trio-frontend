import commonApi from './api/commonApi';
import {launchImageLibrary} from 'react-native-image-picker';
import ImageResizer from 'react-native-image-resizer';

/**
 *
 * Îã®Ïùº Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú: uploadSingleImage -> Í∞ÑÏ†ëÏ†ÅÏúºÎ°ú S3Ïóê ÏóÖÎ°úÎìú ÌõÑ imageUrl Î∞òÌôò
 * Î≥µÏàò Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú: uploadMultiImage -> Í∞ÑÏ†ëÏ†ÅÏúºÎ°ú S3Ïóê ÏóÖÎ°úÎìú ÌõÑ imageUrl Î∞∞Ïó¥ Î∞òÌôò
 * ÎØºÍ∞ê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú(ÏÇ¨ÏóÖÏûêÎì±Î°ùÏ¶ù): uploadSensitiveImage -> ÏßÅÏ†ê S3Ïóê ÏóÖÎ°úÎìú ÌõÑ imageUrl Î∞òÌôò
 *
 * ÏúÑÏùò Ìï®Ïàò Ïã§Ìñâ Ïãú ÏûêÎèôÏúºÎ°ú Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÎ∂ÄÌÑ∞ url Î∞òÌôòÍπåÏßÄ Îê®
 * Ïù¥ÎØ∏ÏßÄ url Î∞õÏïÑÏÑú ÏàòÏ†ï, Îì±Î°ùÏóê Ïì∞Î©¥ Îê©ÎãàÎã§
 * ÏòàÏãúÎäî UserEditProfile Ï∞∏Í≥†
 */

//ÎπÑÎØºÍ∞ê Ïù¥ÎØ∏ÏßÄ URL Î∞õÍ∏∞
const getPresignedUrl = async filename => {
  const response = await commonApi.getPresignedUrl(filename);
  return response.data;
};

// ‚¨áÔ∏è ÏïïÏ∂ï Ïú†Ìã∏ (JPEGÎ°ú Î¶¨ÏÇ¨Ïù¥Ï¶à/Ïû¨Ïù∏ÏΩîÎî©)
const compressToJPEG = async (
  uri,
  {maxWidth = 1280, maxHeight = 1280, quality = 0.8} = {},
) => {
  // image-resizerÏùò qualityÎäî 0..100
  const q = Math.max(1, Math.min(100, Math.round(quality * 100)));
  const {uri: outUri} = await ImageResizer.createResizedImage(
    uri,
    maxWidth,
    maxHeight,
    'JPEG', // JPEGÎ°ú ÌÜµÏùº
    q,
  );
  return outUri;
};

//S3Ïóê ÏóÖÎ°úÎìú
export const uploadImageToS3 = async (presignedUrl, fileUri, fileType) => {
  const fileData = await fetch(fileUri);
  const blob = await fileData.blob();

  await fetch(presignedUrl, {
    method: 'PUT',
    headers: {'Content-Type': 'image/*'}, // Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ
    body: blob,
  });

  return presignedUrl.split('?')[0]; // Ïã§Ï†ú Ï†ëÍ∑º URL
};

//Îã®Ïùº Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (‚úÖ ÏïïÏ∂ï Ï∂îÍ∞Ä)
export const uploadSingleImage = async () => {
  const result = await new Promise(resolve =>
    launchImageLibrary({mediaType: 'photo'}, response => resolve(response)),
  );

  if (result.didCancel || result.errorCode || !result.assets) return null;

  const asset = result.assets[0];
  const originalUri = asset.uri;

  // 1) ÏïïÏ∂ï ÏãúÎèÑ ‚Üí Ïã§Ìå®ÌïòÎ©¥ ÏõêÎ≥∏ ÏÇ¨Ïö©
  let fileUri = originalUri;
  try {
    fileUri = await compressToJPEG(originalUri, {
      maxWidth: 1280,
      maxHeight: 1280,
      quality: 0.8,
    });
  } catch (e) {
    console.warn(
      '[uploadSingleImage] compress failed -> fallback to original:',
      e,
    );
  }

  // ÏïïÏ∂ï Í≤∞Í≥ºÎäî JPEGÏù¥ÎØÄÎ°ú fileType/ÌôïÏû•ÏûêÎäî jpeg/jpgÎ°ú ÎßûÏ∂§
  const fileType = 'image/jpeg';
  const filename = generateUniqueFilename('jpg');

  const presignedUrl = await getPresignedUrl(filename);
  const uploadedUrl = await uploadImageToS3(presignedUrl, fileUri, fileType);

  return uploadedUrl;
};

//Î≥µÏàò Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (‚úÖ Í∞Å Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Ï∂îÍ∞Ä)
export const uploadMultiImage = async (limit = 10) => {
  const result = await new Promise(resolve =>
    launchImageLibrary(
      {
        mediaType: 'photo',
        selectionLimit: limit,
      },
      response => resolve(response),
    ),
  );

  if (result.didCancel || result.errorCode || !result.assets) return [];

  const uploadedUrls = [];

  for (const asset of result.assets) {
    const originalUri = asset.uri;

    // 1) ÏïïÏ∂ï ÏãúÎèÑ ‚Üí Ïã§Ìå® Ïãú ÏõêÎ≥∏
    let fileUri = originalUri;
    try {
      fileUri = await compressToJPEG(originalUri, {
        maxWidth: 1280,
        maxHeight: 1280,
        quality: 0.8,
      });
    } catch (e) {
      console.warn(
        '[uploadMultiImage] compress failed -> fallback to original:',
        e,
      );
    }

    const fileType = 'image/jpeg';
    const filename = generateUniqueFilename('jpg');

    const presignedUrl = await getPresignedUrl(filename);
    const uploadedUrl = await uploadImageToS3(presignedUrl, fileUri, fileType);

    uploadedUrls.push(uploadedUrl);
  }

  return uploadedUrls;
};

/**
 * ÎØºÍ∞ê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (ÏÇ¨ÏóÖÏûêÎì±Î°ùÏ¶ù, Ïã†Î∂ÑÏ¶ù Îì±)
 * ‚Üí Î∞±ÏóîÎìúÏóê ÏßÅÏ†ë multipart/form-dataÎ°ú ÏóÖÎ°úÎìú
 * (ÏöîÏ≤≠ÎåÄÎ°ú "ÏµúÏÜå Î≥ÄÍ≤Ω" ÏõêÏπô: Ïó¨Í∏∞Ïóî ÏïïÏ∂ï ÎπÑÏ†ÅÏö© / ÌïÑÏöîÌïòÎ©¥ Ï£ºÏÑù Ìï¥Ï†úÌï¥ÎèÑ Îê®)
 */
export const uploadSensitiveImage = async () => {
  const result = await new Promise(resolve =>
    launchImageLibrary({mediaType: 'photo'}, response => resolve(response)),
  );
  if (result.didCancel || result.errorCode || !result.assets) return null;

  const asset = result.assets[0];
  const originalUri = asset.uri;

  // üìå Îçî Í≥µÍ≤©Ï†ÅÏù∏ Ï†ÅÏùëÌòï ÏïïÏ∂ï Ï†ÅÏö©
  let fileUri = originalUri;
  try {
    fileUri = await adaptiveCompressToJPEG(originalUri, {
      targetBytes: 1.8 * 1024 * 1024, // ÏÑúÎ≤Ñ ÌïúÎèÑ 2MBÎùº Í∞ÄÏ†ï Ïãú Ïó¨Ïú†
      startMax: 1600,
      minMax: 800,
      startQuality: 0.8,
      minQuality: 0.55,
      stepQuality: 0.1,
    });
  } catch (e) {
    console.warn('[uploadSensitiveImage] adaptive compress failed:', e);
  }

  const fileName = generateUniqueFilename('jpg');
  const fileType = 'image/jpeg';

  const formData = new FormData();
  formData.append('image', {uri: fileUri, name: fileName, type: fileType});

  try {
    const response = await commonApi.postImage(formData);
    return response.data;
  } catch (error) {
    console.error('ÎØºÍ∞ê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®:', error?.response?.data?.message);
    return null;
  }
};

export const generateUniqueFilename = (extension = 'jpg') => {
  const timestamp = Date.now(); // ÌòÑÏû¨ ÏãúÍ∞Ñ (ms)
  const random = Math.floor(Math.random() * 1000000); // 0 ~ 999999
  return `image_${timestamp}_${random}.${extension}`;
};

// Î∞îÏù¥Ìä∏ ÌÅ¨Í∏∞ Íµ¨ÌïòÍ∏∞ (RN fetch ‚Üí blob ‚Üí size)
const getFileSize = async uri => {
  const res = await fetch(uri);
  const blob = await res.blob();
  return blob.size; // bytes
};

// Î™©Ìëú Ïö©Îüâ Ïù¥ÌïòÍ∞Ä Îê† ÎïåÍπåÏßÄ maxWidth/qualityÎ•º Ï§ÑÏó¨Í∞ÄÎ©∞ Ïû¨ÏïïÏ∂ï
export const adaptiveCompressToJPEG = async (
  uri,
  {
    targetBytes = 1.8 * 1024 * 1024, // 1.8MB
    startMax = 1600,
    minMax = 800,
    startQuality = 0.8,
    minQuality = 0.5,
    stepQuality = 0.1,
  } = {},
) => {
  let maxEdge = startMax;
  let quality = startQuality;
  let outUri = uri;

  // 1Ï∞® ÏïïÏ∂ï
  outUri = (
    await ImageResizer.createResizedImage(
      uri,
      maxEdge,
      maxEdge,
      'JPEG',
      Math.round(quality * 100),
    )
  ).uri;
  let size = await getFileSize(outUri);
  if (size <= targetBytes) return outUri;

  // Î∞òÎ≥µ ÏïïÏ∂ï
  while (quality > minQuality || maxEdge > minMax) {
    if (quality > minQuality) {
      quality = Math.max(minQuality, +(quality - stepQuality).toFixed(2));
    } else if (maxEdge > minMax) {
      maxEdge = Math.max(minMax, maxEdge - 200);
      // qualityÎäî ÏÇ¥Ïßù Î°§Î∞±Ìï¥ÏÑú too small Î∞©ÏßÄ
      quality = Math.min(startQuality, quality + stepQuality);
    }

    outUri = (
      await ImageResizer.createResizedImage(
        uri,
        maxEdge,
        maxEdge,
        'JPEG',
        Math.round(quality * 100),
      )
    ).uri;
    size = await getFileSize(outUri);
    if (size <= targetBytes) break;
  }
  return outUri;
};

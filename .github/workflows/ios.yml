name: iOS CI/CD to TestFlight

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Xcode version
        run: xcodebuild -version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node dependencies
        run: yarn install

      - name: Set up Ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Install Ruby gems
        working-directory: ios
        run: bundle install

      - name: Install CocoaPods 1.2+ (or β 버전)
        run: |
          gem install cocoapods --pre
          pod --version

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods
        working-directory: ios
        run: pod install --repo-update

      # DerivedData 삭제 (Embed 스크립트 멈춤 방지)
      - name: Clean Xcode DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Cache Xcode DerivedData
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-derivedata-

      # Embed 스크립트 권한 부여
      - name: Fix Embed Pods Frameworks script permissions
        run: |
          chmod +x ios/Pods/Target\ Support\ Files/Pods-*/Pods-*-frameworks.sh || true

      - name: Decode and install iOS Distribution Certificate
        run: |
          echo "$CERT_BASE64" | base64 --decode > ios/haneul_distribution.p12
          ls -lh ios/haneul_distribution.p12
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db
          security import ios/haneul_distribution.p12 \
            -k ~/Library/Keychains/login.keychain-db \
            -P "$CERT_PASSWORD" \
            -T /usr/bin/codesign \
            -A
          security set-keychain-settings -lut 21600 ~/Library/Keychains/login.keychain-db
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

      - name: Decode and install provisioning profile
        run: |
          rm -rf "$HOME/Library/MobileDevice/Provisioning Profiles"/*
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          echo "$PROFILE_BASE64" | base64 --decode > ios/WorkAwayAppStoreProfile.mobileprovision
          uuid=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< \
            "$(security cms -D -i ios/WorkAwayAppStoreProfile.mobileprovision)" 2>/dev/null)
          echo "PROFILE_UUID=$uuid" >> $GITHUB_ENV
          cp ios/WorkAwayAppStoreProfile.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/${uuid}.mobileprovision"
        env:
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}

      - name: Inspect installed provisioning profile
        run: |
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"
          ls -lh "$PROFILE_PATH" || (echo "::error:: 프로파일이 없습니다: $PROFILE_PATH"; exit 1)
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :Name" - 2>/dev/null || echo "No Name Key"
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" - 2>/dev/null || echo "No application-identifier Key"
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :DeveloperCertificates" - 2>/dev/null \
            | grep -c "-----BEGIN CERTIFICATE-----" || echo "0"
        # 별도 env 지정 불필요 (GITHUB_ENV로 PROFILE_UUID가 자동 주입됨)

      - name: List installed Code Signing identities
        run: |
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db
          security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db

      - name: Build and Deploy with Fastlane
        working-directory: ios
        run: bundle exec fastlane beta
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

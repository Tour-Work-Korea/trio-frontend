name: iOS CI/CD to TestFlight

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: macos-latest

    steps:
      # … (1~7번 스텝 생략) …

      # 8. Provisioning Profile 디코딩, UUID 추출, 그리고 GITHUB_ENV에 export
      - name: Decode and debug provisioning profile
        working-directory: ios
        run: |
          echo "==> Cleaning up old provisioning profiles..."
          rm -rf "$HOME/Library/MobileDevice/Provisioning Profiles"/*
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          echo "==> PROFILE_BASE64 length: ${#PROFILE_BASE64}"
          if [ -z "$PROFILE_BASE64" ]; then
            echo "::error::[!] PROFILE_BASE64 environment variable is empty!"
            exit 1
          fi

          echo "==> Decoding PROFILE_BASE64 into ios/WorkAwayAppStoreProfile.mobileprovision..."
          echo "$PROFILE_BASE64" | base64 --decode > ios/WorkAwayAppStoreProfile.mobileprovision

          echo "==> After decode, listing file:"
          ls -lh ios/WorkAwayAppStoreProfile.mobileprovision

          echo "==> Extracting UUID from mobileprovision with PlistBuddy..."
          uuid=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< \
            "$(security cms -D -i ios/WorkAwayAppStoreProfile.mobileprovision)" 2>/dev/null)
          if [ -z "$uuid" ]; then
            echo "::error::[!] Failed to extract UUID from provisioning profile. The file may be corrupted."
            exit 1
          fi
          echo "Provisioning Profile UUID: $uuid"

          # → GITHUB_ENV에 PROFILE_UUID를 저장해서 다음 스텝에서도 사용하도록 함
          echo "PROFILE_UUID=$uuid" >> $GITHUB_ENV

          echo "==> Copying to $HOME/Library/MobileDevice/Provisioning Profiles/${uuid}.mobileprovision"
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp ios/WorkAwayAppStoreProfile.mobileprovision \
             "$HOME/Library/MobileDevice/Provisioning Profiles/${uuid}.mobileprovision"
        env:
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}

      # 9. 프로비저닝 프로파일 메타데이터 출력 (전역 uuid 사용)
      - name: Inspect installed provisioning profile
        run: |
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"

          echo "===== 프로파일이 존재하는지 확인 (ls) ====="
          ls -lh "$PROFILE_PATH" || (echo "::error::프로파일 파일을 찾을 수 없습니다: $PROFILE_PATH"; exit 1)

          echo ""
          echo "===== 프로파일 이름(Name) ====="
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :Name" - 2>/dev/null \
            || echo "No Name Key"

          echo ""
          echo "===== application-identifier ====="
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" - 2>/dev/null \
            || echo "No application-identifier Key"

          echo ""
          echo "===== 포함된 인증서(DeveloperCertificates) 개수 ====="
          security cms -D -i "$PROFILE_PATH" \
            | /usr/libexec/PlistBuddy -c "Print :DeveloperCertificates" - 2>/dev/null \
            | grep -c "-----BEGIN CERTIFICATE-----" \
            || echo "0"
        env:
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}

      # 10. 설치된 Code Signing 인증서 목록 출력 (디버깅)
      - name: List installed Code Signing identities
        run: |
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db
          security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db

      # 11. Fastlane을 통해 빌드 후 TestFlight 배포
      - name: Build and Deploy with Fastlane
        working-directory: ios
        run: bundle exec fastlane beta
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

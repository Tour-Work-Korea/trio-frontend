default_platform(:ios)

platform :ios do
  desc "빌드 전에 인증서/프로파일 받아오고 IPA 생성"
  lane :build_ipa do
    # ① match 로 App Store 프로비전 가져오기
    match(
      type: "appstore",              # or :appstore
      readonly: ENV["CI"] == "true", # CI 환경이면 readonly:true
      git_url: ENV["MATCH_GIT_URL"], # Secrets에 저장한 URL
      username: ENV["APPLE_ID"],     # Apple ID (팀 계정)
      team_id: ENV["TEAM_ID"]        # "59P3UT5738"
    )

    # ② JS 번들링
    sh <<-SHELL
      cd ..
      yarn react-native bundle \
        --platform ios \
        --dev false \
        --entry-file index.js \
        --bundle-output ios/trioFrontendApp/main.jsbundle \
        --assets-dest ios/trioFrontendApp
    SHELL

    # ③ 빌드 & export
    build_app(
      workspace:       "trioFrontendApp.xcworkspace",
      scheme:          "trioFrontendApp",
      configuration: "Release",
      clean:           false,
      export_method:   "app-store",
      export_options: {
            provisioningProfiles: {
              "com.haneul.workaway" => "WorkAwayAppStoreProfile"
            },
            compileBitcode: false,
            signingStyle: "manual"
          },
      output_directory:"../output",
      output_name:     "trioFrontendApp.ipa"
      # provisioningProfiles 등은 match가 설정해 줍니다
    )
  end

  desc "TestFlight 업로드"
  lane :upload_ipa do
    api_key = app_store_connect_api_key(
      key_id:     ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id:  ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_PRIVATE_KEY"],
      duration:   1200,
      in_house:   false
    )
    upload_to_testflight(
      api_key: api_key,
      ipa:      "../output/trioFrontendApp.ipa",
      skip_waiting_for_build_processing: true
    )
  end
end
